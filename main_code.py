import os
os.environ["CUDA_VISIBLE_DEVICES"]="1"
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

batch_size = 4
img_height = 224
img_width = 224

data_dir = './training'


train_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)
  
class_names = train_ds.class_names
print(class_names)


normalization_layer = layers.Rescaling(1./255)
#normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
#image_batch, labels_batch = next(iter(normalized_ds))
#first_image = image_batch[0]
#print(np.min(first_image), np.max(first_image))

num_classes = len(class_names)

base_model = tf.keras.applications.MobileNetV2(input_shape=(img_height,img_width,3),include_top=False,weights="imagenet")
glob=tf.keras.layers.GlobalAveragePooling2D()
den=tf.keras.layers.Dense(num_classes)

inputs=tf.keras.Input(shape=(img_height,img_width,3))
x=base_model(inputs)
x=glob(x)
out=den(x)
model=tf.keras.Model(inputs,out)


model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
filename="logs.csv"
hist=tf.keras.callbacks.CSVLogger(filename, separator=",",append=True)
tmp="./checkp/"
check=tf.keras.callbacks.ModelCheckpoint(tmp, save_weights_only=True, monitor="val_accuracy",mode="max", save_best_only=True)
epochs=2
history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs,
  callbacks=[hist,check]
)
print(history)
