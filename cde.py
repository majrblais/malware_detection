#####################################
# Libraries
#####################################
# Common libs
import pandas as pd
import numpy as np
import sys
import os
import random
from pathlib import Path
os.environ["CUDA_VISIBLE_DEVICES"] = "1"
# Image processingi
import imageio
import cv2
import skimage.transform
#from skimage.transform import rescale, resize, downscale_local_mean

# Charts
import matplotlib.pyplot as plt

# ML, statistics
import scipy
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix, roc_curve, auc, roc_auc_score

# Tensorflow
#from sklearn.preprocessing import OneHotEncoder
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Rescaling
from tensorflow.keras.layers import Dense, Dropout, Flatten, Activation
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from tensorflow.keras.optimizers import Adam

import cv2
df=pd.read_csv("./valid_ready.csv")

for index, row in df.iterrows():
    name=row["sha256"]
    img=imageio.imread("./valid_rgb/"+name+"_RGB.png")
    img=cv2.resize(img,(224,224))
    lst=[row["adware"],row["flooder"],row["ransomware"],row["dropper"],row["spyware"],row["packed"],row["crypto_miner"],row["file_infector"],row["installer"],row["worm"],row["downloader"]]
    print(img)
    #lst=row["is_malware"]
    print(name)
    print(lst)
    break



batch_size=1
img_size=(224,224)



            
num_classes=11
model = Sequential([
  Rescaling(1./255, input_shape=(img_size[0],img_size[1], 3)),
  Conv2D(16, 3, padding='same', activation='relu'),
  MaxPooling2D(),
  Conv2D(32, 3, padding='same', activation='relu'),
  MaxPooling2D(),
  Conv2D(64, 3, padding='same', activation='relu'),
  MaxPooling2D(),
  Flatten(),
  Dense(128, activation='relu'),
  Dense(num_classes)
])

model.compile(optimizer='adam',
              loss="categorical_crossentropy",
              metrics=['accuracy'])

img=np.asarray(img)
lst=np.asarray(lst)

print(img.shape)
img=img[np.newaxis,...]
lst=lst[np.newaxis,...]
print(lst.shape)
epochs=10
history = model.fit(
  x=img,
  y=lst,
  epochs=epochs
)
